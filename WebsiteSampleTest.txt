<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Sample Test Website</title>

  <!-- Basic styling (responsive) -->
  <style>
    :root{
      --accent: #2563eb;
      --muted: #6b7280;
      --card-bg: #f8fafc;
      --max-width: 1000px;
      --radius: 12px;
      font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
    }

    *{box-sizing: border-box}
    body{
      margin:0;
      background: linear-gradient(180deg,#ffffff 0%, #f1f5f9 100%);
      color: #0f172a;
      line-height:1.45;
      -webkit-font-smoothing:antialiased;
      -moz-osx-font-smoothing:grayscale;
    }

    .container{
      max-width: var(--max-width);
      margin: 28px auto;
      padding: 0 20px;
    }

    header{
      display:flex;
      align-items:center;
      justify-content:space-between;
      gap:16px;
      padding:18px;
      background:rgba(255,255,255,0.85);
      border-radius: 14px;
      box-shadow: 0 4px 18px rgba(15,23,42,0.06);
      position: sticky;
      top: 18px;
      z-index: 10;
      backdrop-filter: blur(4px);
    }

    .brand{
      display:flex;
      gap:12px;
      align-items:center;
    }
    .logo{
      width:46px;height:46px;border-radius:10px;
      display:grid;place-items:center;color:white;font-weight:700;
      background:linear-gradient(135deg, var(--accent), #7c3aed);
      box-shadow: 0 6px 18px rgba(37,99,235,0.18);
    }
    nav{display:flex;gap:12px;align-items:center}
    nav a{
      text-decoration:none;color:var(--muted);padding:8px 10px;border-radius:8px;font-weight:600;
    }
    nav a:hover{background:rgba(37,99,235,0.06);color:var(--accent)}

    .cta{
      background:var(--accent);color:white;padding:8px 12px;border-radius:10px;text-decoration:none;font-weight:700;
      box-shadow:0 6px 16px rgba(37,99,235,0.16);
    }

    /* Mobile menu */
    .menu-toggle{display:none;border:0;background:none;font-size:18px;padding:6px}
    @media (max-width:720px){
      nav{display:none}
      .menu-toggle{display:inline-block}
      header{flex-wrap:wrap}
    }

    /* Hero */
    .hero{
      display:grid;
      grid-template-columns: 1fr 380px;
      gap:20px;
      margin:28px 0;
      align-items:center;
    }
    .hero-card{
      background: linear-gradient(180deg, rgba(99,102,241,0.06), rgba(99,102,241,0.02));
      border-radius: var(--radius);
      padding:28px;
    }
    .hero h1{margin:0 0 8px;font-size:28px}
    .hero p{margin:0 0 14px;color:var(--muted)}
    .cta-row{display:flex;gap:12px;margin-top:16px}

    /* Small demo stats */
    .stats{
      display:flex;gap:12px;margin-top:12px;
    }
    .stat{
      background: white;padding:10px 12px;border-radius:10px;box-shadow:0 6px 14px rgba(15,23,42,0.04);
      font-weight:700;color:var(--accent);
    }

    /* Cards grid */
    .grid{
      display:grid;
      grid-template-columns: repeat(3, 1fr);
      gap:16px;
      margin: 10px 0 22px;
    }
    .card{
      background: var(--card-bg);
      padding:14px;border-radius:12px;box-shadow: 0 6px 12px rgba(2,6,23,0.04);
    }
    .card h3{margin:0 0 8px;font-size:16px}
    .card p{margin:0 0 12px;color:var(--muted);font-size:14px}

    /* Contact form */
    .form-card{
      padding:16px;border-radius:12px;background:white;box-shadow:0 8px 30px rgba(2,6,23,0.06);
    }
    label{display:block;margin-bottom:6px;font-weight:600;color:#0f172a;font-size:14px}
    input[type="text"],input[type="email"],textarea{
      width:100%;padding:10px;border-radius:8px;border:1px solid #e6eef7;background:#fbfeff;
      margin-bottom:12px;font-size:14px;
    }
    button{padding:10px 14px;border-radius:10px;border:0;background:var(--accent);color:white;font-weight:700;cursor:pointer}
    button[disabled]{opacity:0.6;cursor:default}

    footer{margin:36px 0 80px;color:var(--muted);text-align:center}

    /* Responsive tweaks */
    @media (max-width:980px){
      .hero{grid-template-columns:1fr}
      .grid{grid-template-columns:repeat(2,1fr)}
    }
    @media (max-width:600px){
      .grid{grid-template-columns:1fr}
      .stats{flex-direction:column;gap:8px}
    }

    /* tiny utility */
    .muted{color:var(--muted);font-weight:600}
    .small{font-size:13px}
  </style>
</head>
<body>

  <div class="container">
    <header>
      <div class="brand">
        <div class="logo" aria-hidden="true">SV</div>
        <div>
          <div style="font-weight:800">SampleV</div>
          <div class="small muted">Test site for VS Code</div>
        </div>
      </div>

      <nav aria-label="Main navigation">
        <a href="#home">Home</a>
        <a href="#features">Features</a>
        <a href="#contact">Contact</a>
        <a class="cta" href="#download">Download</a>
      </nav>

      <button class="menu-toggle" aria-label="Toggle menu" id="menuToggle">☰</button>
    </header>

    <main>
      <section class="hero" id="home">
        <div class="hero-card">
          <h1>Welcome — you're testing a local site</h1>
          <p>This single-file sample demonstrates semantic HTML, responsive CSS, and small JavaScript utilities so you can fiddle with it in VS Code.</p>

          <div class="cta-row">
            <a class="cta" href="#contact" id="jumpContact">Contact Us</a>
            <a href="#features" style="padding:8px 12px;border-radius:10px;background:#eff6ff;color:var(--accent);text-decoration:none;font-weight:700">See features</a>
          </div>

          <div class="stats" aria-hidden="true">
            <div class="stat">JS Ready</div>
            <div class="stat">Responsive</div>
            <div class="stat">No build</div>
          </div>
        </div>

        <aside class="form-card" aria-labelledby="subscribeTitle">
          <h3 id="subscribeTitle">Quick subscribe</h3>
          <p class="small muted">Enter an email and click subscribe — this does client-side validation only.</p>

          <form id="subscribeForm" onsubmit="return false;">
            <label for="email">Email</label>
            <input id="email" type="email" placeholder="you@example.com" required>
            <button id="subscribeBtn">Subscribe</button>
            <div id="subMessage" class="small muted" style="margin-top:10px"></div>
          </form>
        </aside>
      </section>

      <section id="features">
        <h2 style="margin-top:6px">Features to play with</h2>
        <p class="muted small">Try editing the HTML/CSS/JS in VS Code and refresh to see changes.</p>

        <div class="grid" id="cardGrid">
          <!-- Cards are generated by JavaScript (see script at bottom). You can also edit/duplicate these manually. -->
        </div>
      </section>

      <section id="contact" style="margin-top:20px;display:grid;grid-template-columns:1fr 320px;gap:18px;align-items:start">
        <div class="card" style="padding:20px">
          <h3>About this sample</h3>
          <p class="small muted">This area is a simple content card. Replace the text with your own experiments — e.g. try adding images, links, or code snippets.</p>

          <h3 style="margin-top:16px">Keyboard shortcuts</h3>
          <ul class="small muted">
            <li>Press <kbd>Ctrl+S</kbd> in VS Code to save and refresh the browser</li>
            <li>Open the devtools with <kbd>F12</kbd> or <kbd>Ctrl+Shift+I</kbd></li>
          </ul>
        </div>

        <div class="form-card">
          <h3>Contact form</h3>
          <p class="small muted">This form demonstrates basic client validation and console logging.</p>

          <form id="contactForm">
            <label for="name">Name</label>
            <input id="name" type="text" placeholder="Your name" required>

            <label for="contactEmail">Email</label>
            <input id="contactEmail" type="email" placeholder="you@example.com" required>

            <label for="message">Message</label>
            <textarea id="message" rows="4" placeholder="Write something..." required></textarea>

            <button type="submit" id="sendBtn">Send message</button>
          </form>
          <div id="contactResult" class="small muted" style="margin-top:10px"></div>
        </div>
      </section>

    </main>

    <footer>
      <div>Made for testing in VS Code — edit <code>index.html</code> and refresh</div>
      <small class="muted">No external libs. Built-in styles + vanilla JS.</small>
    </footer>
  </div>

  <!-- Small JS for interactivity -->
  <script>
    // Toggle mobile nav
    const menuToggle = document.getElementById('menuToggle');
    menuToggle.addEventListener('click', () => {
      const nav = document.querySelector('nav');
      if (nav.style.display === 'flex') {
        nav.style.display = '';
      } else {
        nav.style.display = 'flex';
        nav.style.flexDirection = 'column';
        nav.style.position = 'absolute';
        nav.style.right = '20px';
        nav.style.top = '78px';
        nav.style.background = 'white';
        nav.style.padding = '12px';
        nav.style.borderRadius = '10px';
        nav.style.boxShadow = '0 10px 30px rgba(2,6,23,0.08)';
      }
    });

    // Subscribe form (client-only)
    const subForm = document.getElementById('subscribeForm');
    const emailInput = document.getElementById('email');
    const subMessage = document.getElementById('subMessage');

    subForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const email = emailInput.value.trim();
      if (!email) {
        subMessage.textContent = 'Please enter an email.';
        return;
      }
      subMessage.textContent = 'Thanks — (this is a demo, no data is sent).';
      console.log('Subscribe clicked:', email);
      // clear after a bit
      setTimeout(()=> { emailInput.value=''; }, 900);
    });

    // Contact form handling
    const contactForm = document.getElementById('contactForm');
    const contactResult = document.getElementById('contactResult');
    contactForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const data = {
        name: document.getElementById('name').value.trim(),
        email: document.getElementById('contactEmail').value.trim(),
        message: document.getElementById('message').value.trim()
      };
      // Simple client validation
      if (!data.name || !data.email || !data.message) {
        contactResult.textContent = 'Please complete all fields.';
        return;
      }
      contactResult.textContent = 'Message sent (client-side demo).';
      console.log('Contact form data:', data);
      contactForm.reset();
    });

    // Dynamic demo cards (so you can play with DOM)
    const features = [
      {title:'Responsive Layout', desc:'Resize the browser to watch the grid and header change.'},
      {title:'Accessible HTML', desc:'Semantic tags and labels make the page easier to use.'},
      {title:'Vanilla JS', desc:'No frameworks — everything runs in the browser directly.'},
      {title:'Client-side forms', desc:'Forms validate in the browser; try sending them.'},
      {title:'Editable in VS Code', desc:'Open this file and change text/styles, then refresh.'},
      {title:'Extend me', desc:'Add images, videos, or external fonts to experiment further.'},
    ];

    const cardGrid = document.getElementById('cardGrid');
    features.forEach(f => {
      const div = document.createElement('div');
      div.className = 'card';
      div.innerHTML = `<h3>${escapeHtml(f.title)}</h3><p>${escapeHtml(f.desc)}</p><button onclick="alert('Clicked: ${escapeHtml(f.title)}')">Try</button>`;
      cardGrid.appendChild(div);
    });

    // small helper to avoid rudimentary HTML injection from strings
    function escapeHtml(s){
      return String(s).replace(/[&<>"'`=\/]/g, function(ch){
        return {'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;', "'":'&#39;','/':'&#x2F;','`':'&#x60;','=':'&#x3D;'}[ch];
      });
    }

    // Optional: link behavior
    document.getElementById('jumpContact').addEventListener('click', (ev) => {
      ev.preventDefault();
      document.getElementById('contact').scrollIntoView({behavior:'smooth'});
    });

    // Console hint for testers
    console.log('Sample site loaded — edit index.html in VS Code and refresh to test changes.');
  </script>
</body>
</html>
